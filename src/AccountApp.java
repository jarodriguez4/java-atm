
import java.util.Arrays;
import javax.swing.JComboBox;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 *
 * @author Jose Rodriguez
 */

public class AccountApp extends javax.swing.JFrame {
    
    /**
     * Creates new form AccountApp
     */
    
    //Declare gobal variables for account form
    ArrayList <Account> accounts = new ArrayList<>();     
    boolean filling = false;
    
    //GUI class
    public AccountApp() throws ParseException {
        initComponents();  
        
        //Read data
        accounts = AccountUtility.getAccounts();
                        
        this.fillComboBox(accounts);
        this.showAccount(this.getCurrentAcountIndex());
    }
    
    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        accountComboBox = new javax.swing.JComboBox<>();
        customerNameTextField = new javax.swing.JTextField();
        openDateTextField = new javax.swing.JTextField();
        balanceTextField = new javax.swing.JTextField();
        depositButton = new javax.swing.JButton();
        withdrawButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bank Account Application");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("Account Number:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Customer Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Open Date:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Balance:");

        accountComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountComboBoxActionPerformed(evt);
            }
        });

        customerNameTextField.setEditable(false);
        customerNameTextField.setBackground(new java.awt.Color(255, 255, 255));
        customerNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        customerNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameTextFieldActionPerformed(evt);
            }
        });

        openDateTextField.setEditable(false);
        openDateTextField.setBackground(new java.awt.Color(255, 255, 255));
        openDateTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        openDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDateTextFieldActionPerformed(evt);
            }
        });

        balanceTextField.setEditable(false);
        balanceTextField.setBackground(new java.awt.Color(255, 255, 255));
        balanceTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        balanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextFieldActionPerformed(evt);
            }
        });

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        withdrawButton.setText("Withdraw");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        transferButton.setText("Transfer To");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(153, 204, 255));
        exitButton.setMnemonic('x');
        exitButton.setText("Exit");
        exitButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(accountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(openDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                        .addComponent(balanceTextField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(withdrawButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depositButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transferButton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(depositButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(withdrawButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(openDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillComboBox(ArrayList<Account> account){            
        filling = true;
        accountComboBox.removeAllItems();
        //Fill combo box with accounts
        for(Account a : account){
           accountComboBox.addItem(a.getAccountNumber());            
        } 
        filling = false;
    }
    
    private int getCurrentAcountIndex(){
        return (int) accountComboBox.getSelectedIndex();
    }
    
    private void showAccount(int index){  
            Account account = accounts.get(index);
            customerNameTextField.setText(account.getCustomerName());
            DateFormat stringdate = new SimpleDateFormat("MM/dd/yyyy");          
            openDateTextField.setText(stringdate.format(account.getOpenDate()));
            balanceTextField.setText(Double.toString(account.getBalance()));           
    }
    
    public static boolean isDouble(String s) {
    try { 
        Double.parseDouble(s); 
        } catch(NumberFormatException e) { 
        return false; 
        } catch(NullPointerException e) {
        return false;
        }
    // Return true if string is integer
    return true;
    }
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        
        try {
            AccountUtility.saveAccounts(accounts);
        } catch (ParseException ex) {
            Logger.getLogger(AccountApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AccountApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);    
    }//GEN-LAST:event_exitButtonActionPerformed

    private void customerNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameTextFieldActionPerformed
        
    }//GEN-LAST:event_customerNameTextFieldActionPerformed

    private void accountComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountComboBoxActionPerformed
        if(!filling){
            this.showAccount(this.getCurrentAcountIndex());
        }       
    }//GEN-LAST:event_accountComboBoxActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        //Get selected account index
        int index = this.getCurrentAcountIndex();
        Account account = accounts.get(index);
        String accountNumber = account.getAccountNumber();
        
        //Show withdraw input box and set input to "amount" variable
        String amount = JOptionPane.showInputDialog(null, "Enter a deposit amount for account " + accountNumber, "Deposit to " + accountNumber, JOptionPane.PLAIN_MESSAGE);
        
        //Clicked cancel button
        if(amount == null || (amount != null && ("".equals(amount)))) {
            System.out.println("Cancel is pressed");
        }
        //clicked ok button
        else {
            //check if deposit is a double
            if(!isDouble(amount)){

                JOptionPane.showConfirmDialog(null, "Invalid deposit amount: " + amount, "Invalid Deposit", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 

            } 
            //check if deposit is positive
            else if(Double.parseDouble(amount) > 0){

                account.deposit(Double.parseDouble(amount));            
                balanceTextField.setText(Double.toString(account.getBalance()));
                JOptionPane.showConfirmDialog(null, "Success!", "Deposit", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

            } 
            //check if deposit is negative
            else if (Double.parseDouble(amount) < 0){

               JOptionPane.showConfirmDialog(null, "Invalid deposit amount: " + amount, "Invalid Deposit", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 

            } 
            //remaining case is if deposit is 0
            else {

                JOptionPane.showConfirmDialog(null, "No deposit was made", "Deposit", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_depositButtonActionPerformed

    private void balanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceTextFieldActionPerformed
        
    }//GEN-LAST:event_balanceTextFieldActionPerformed

    private void openDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDateTextFieldActionPerformed
        
    }//GEN-LAST:event_openDateTextFieldActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        //Get selected account index
        int index = this.getCurrentAcountIndex();
        Account account = accounts.get(index);
        String accountNumber = account.getAccountNumber();
        
        //Get balance
        Double accountBalance = account.getBalance();
        
        //Show withdraw input box and set input to "amount" variable
        String amount = JOptionPane.showInputDialog(null, "Enter a withdrawl amount for account " + accountNumber, "Withdraw From " + accountNumber, JOptionPane.PLAIN_MESSAGE);
        
        
        //Clicked cancel button
        if(amount == null || (amount != null && ("".equals(amount)))) {
            System.out.println("Cancel is pressed");
        }
        //clicked ok button
        else {
            //check: make sure input is a number of type double
            if(!isDouble(amount)){

                JOptionPane.showConfirmDialog(null, "Invalid withdraw amount: " + amount, "Invalid Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 

            }
            //check if withdraw is positive and less than the current balance
            else if(Double.parseDouble(amount) > 0 && accountBalance > Double.parseDouble(amount)){

                account.withdraw(Double.parseDouble(amount));            
                balanceTextField.setText(Double.toString(account.getBalance()));
                JOptionPane.showConfirmDialog(null, "Success!", "Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

            } 
            //check if withdraw is negative
            else if (Double.parseDouble(amount) < 0){

               JOptionPane.showConfirmDialog(null, "Invalid withdrawl amount: " + amount, "Invalid Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 
            } 
            //check if withdraw amount is less than the current balance
            else if(accountBalance < Double.parseDouble(amount)){

                JOptionPane.showConfirmDialog(null, "Insufficient funds", "Invalid Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);

            } 
            //remaining case is if deposit is 0
            else {

                JOptionPane.showConfirmDialog(null, "No withdrawl was made", "Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            }
        }       
    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
       //Get selected account index
        int index = this.getCurrentAcountIndex();
        Account transferFromAccount = accounts.get(index);
        String transferFrom = transferFromAccount.getAccountNumber();
                
        //set transfer to account number
        String transferTo = JOptionPane.showInputDialog(null, "Enter a the beneficiary account number", "Transfer from account " + transferFrom, JOptionPane.PLAIN_MESSAGE);
        
        //Clicked cancel button
        if(transferTo == null || (transferTo != null && ("".equals(transferTo)))) {
            System.out.println("Cancel is pressed");
        }
        //clicked ok button
        else {
            //check if account number exists
            Account transferToAccount = new Account();
            boolean accountExists = false;
            String accountNumberI = "";
            for(int i = 0; i < accounts.size(); i++){                 
                accountNumberI = accounts.get(i).getAccountNumber();                
                if(transferTo.equals(accountNumberI)){
                    accountExists = true;
                    transferToAccount = accounts.get(i);
                }
            }

            //If account number does not exsist then error message
            if(!accountExists){
                JOptionPane.showConfirmDialog(null, "Invalid beneficiary account number: " + transferTo, "Invalid transfer", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 
            }
            else{
                //Show transfer input box and set input to "amount" variable
                String amount = JOptionPane.showInputDialog(null, "Enter the transfer amount for account", "Transfer amount", JOptionPane.PLAIN_MESSAGE);

                //Clicked cancel button
                if(amount == null || (amount != null && ("".equals(amount)))) {
                    System.out.println("Cancel is pressed");
                }
                //clicked ok button
                else {
                    //check if withdrawl is a double
                    if(!isDouble(amount)){

                        JOptionPane.showConfirmDialog(null, "Invalid withdrawl amount: " + amount, "Invalid Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 

                    } 
                    //check if withdrawl is positive
                    else if(Double.parseDouble(amount) > 0){ 
                        //make the transfer
                        int transferType = CheckingAccount.CheckingAccount(Double.parseDouble(amount), transferFromAccount, transferToAccount);
                       
                        //set the updating balance
                        balanceTextField.setText(Double.toString(transferFromAccount.getBalance()));

                        if(transferType == 0) {
                            JOptionPane.showConfirmDialog(null, "$" + amount + " was transfered to " + transferTo, "Transfer Successful", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
                        }
                        else if(transferType == 1) {
                            JOptionPane.showConfirmDialog(null, "$" + amount + " was transfered to " + transferTo + "\n$" + AccountConstants.TRANSFER_FEE + " transfer fee was applied.", "Transfer Successful", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
                        }
                        else if(transferType == -1) {
                            JOptionPane.showConfirmDialog(null, "Transfer is unsuccessful because balance is less than transfer amount and transfer fee.", "Unsuccessful transfer", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            JOptionPane.showConfirmDialog(null, "Transfer is unsuccessful because balance is less than transfer amount.", "Unsuccessful transfer", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                        }          
                    } 
                    //check if withdrawl is negative
                    else if (Double.parseDouble(amount) < 0){

                       JOptionPane.showConfirmDialog(null, "Invalid withdrawl amount: " + amount, "Invalid Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE); 

                    } 
                    //remaining case is if withdrawl is 0
                    else {

                        JOptionPane.showConfirmDialog(null, "No withdrawl was made", "Withdrawl", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);

                    }
                }  
            }
        }
    }//GEN-LAST:event_transferButtonActionPerformed

    /*
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Shows the GUI
                    new AccountApp().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(AccountApp.class.getName()).log(Level.SEVERE, null, ex);
                }              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountComboBox;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JButton depositButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField openDateTextField;
    private javax.swing.JButton transferButton;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration//GEN-END:variables
}
